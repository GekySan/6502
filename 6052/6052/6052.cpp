#include "Bus.hpp"
#include "Color.hpp"
#include "CPU.hpp"
#include "Renderer.hpp"

#include <ctime>
#include <iostream>
#include <memory>
#include <random>
#include <vector>
#include <Windows.h>


LRESULT CALLBACK WindowProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam);

bool read_screen_state(CPU& cpu, std::vector<uint8_t>& frame) {
    bool update = false;
    size_t frame_idx = 0;

    for (uint16_t i = 0x0200; i < 0x0600; ++i) {
        uint8_t color_idx = cpu.mem_read(i);
        Color col = color(color_idx);
        uint8_t r = col.r;
        uint8_t g = col.g;
        uint8_t b = col.b;

        if (frame[frame_idx] != r || frame[frame_idx + 1] != g || frame[frame_idx + 2] != b) {
            frame[frame_idx] = r;
            frame[frame_idx + 1] = g;
            frame[frame_idx + 2] = b;
            update = true;
        }
        frame_idx += 3;
    }
    return update;
}

int WINAPI WinMain(_In_ HINSTANCE hInstance, _In_opt_ HINSTANCE hPrevInstance, _In_ LPSTR lpCmdLine, _In_ int nShowCmd)
{
    HWND hwnd;
    const wchar_t CLASS_NAME[] = L"DirectXWindowClass";

    WNDCLASS wc = {};
    wc.lpfnWndProc = WindowProc;
    wc.hInstance = hInstance;
    wc.lpszClassName = CLASS_NAME;
    wc.hCursor = LoadCursor(NULL, IDC_ARROW);

    if (!RegisterClass(&wc))
    {
        std::cerr << "Échec de l'enregistrement de la classe de fenêtre: " << GetLastError() << std::endl;
        return -1;
    }

    auto bus = std::make_unique<Bus>();
    auto cpu = std::make_unique<CPU>(*bus);

    hwnd = CreateWindowEx(
        0,
        CLASS_NAME,
        L"6502",
        WS_OVERLAPPEDWINDOW,
        CW_USEDEFAULT, CW_USEDEFAULT,
        640, 640,
        NULL,
        NULL,
        hInstance,
        cpu.get()
    );

    if (hwnd == NULL)
    {
        std::cerr << "Erreur lors de la création de la fenêtre: " << GetLastError() << std::endl;
        return -1;
    }

    ShowWindow(hwnd, nShowCmd);

    Renderer renderer;
    HRESULT hr = renderer.InitD3D(hwnd);
    if (FAILED(hr))
    {
        std::cerr << "Échec de l'initialisation de DirectX" << std::endl;
        return -1;
    }

    auto running = std::make_unique<bool>(true);
    /* https://skilldrick.github.io/easy6502/#snake */
    auto game_code = std::make_unique<std::vector<uint8_t>>(std::initializer_list<uint8_t>{
        0x20, 0x06, 0x06, 0x20, 0x38, 0x06, 0x20, 0x0d, 0x06, 0x20, 0x2a, 0x06, 0x60, 0xa9, 0x02,
            0x85, 0x02, 0xa9, 0x04, 0x85, 0x03, 0xa9, 0x11, 0x85, 0x10, 0xa9, 0x10, 0x85, 0x12, 0xa9,
            0x0f, 0x85, 0x14, 0xa9, 0x04, 0x85, 0x11, 0x85, 0x13, 0x85, 0x15, 0x60, 0xa5, 0xfe, 0x85,
            0x00, 0xa5, 0xfe, 0x29, 0x03, 0x18, 0x69, 0x02, 0x85, 0x01, 0x60, 0x20, 0x4d, 0x06, 0x20,
            0x8d, 0x06, 0x20, 0xc3, 0x06, 0x20, 0x19, 0x07, 0x20, 0x20, 0x07, 0x20, 0x2d, 0x07, 0x4c,
            0x38, 0x06, 0xa5, 0xff, 0xc9, 0x77, 0xf0, 0x0d, 0xc9, 0x64, 0xf0, 0x14, 0xc9, 0x73, 0xf0,
            0x1b, 0xc9, 0x61, 0xf0, 0x22, 0x60, 0xa9, 0x04, 0x24, 0x02, 0xd0, 0x26, 0xa9, 0x01, 0x85,
            0x02, 0x60, 0xa9, 0x08, 0x24, 0x02, 0xd0, 0x1b, 0xa9, 0x02, 0x85, 0x02, 0x60, 0xa9, 0x01,
            0x24, 0x02, 0xd0, 0x10, 0xa9, 0x04, 0x85, 0x02, 0x60, 0xa9, 0x02, 0x24, 0x02, 0xd0, 0x05,
            0xa9, 0x08, 0x85, 0x02, 0x60, 0x60, 0x20, 0x94, 0x06, 0x20, 0xa8, 0x06, 0x60, 0xa5, 0x00,
            0xc5, 0x10, 0xd0, 0x0d, 0xa5, 0x01, 0xc5, 0x11, 0xd0, 0x07, 0xe6, 0x03, 0xe6, 0x03, 0x20,
            0x2a, 0x06, 0x60, 0xa2, 0x02, 0xb5, 0x10, 0xc5, 0x10, 0xd0, 0x06, 0xb5, 0x11, 0xc5, 0x11,
            0xf0, 0x09, 0xe8, 0xe8, 0xe4, 0x03, 0xf0, 0x06, 0x4c, 0xaa, 0x06, 0x4c, 0x35, 0x07, 0x60,
            0xa6, 0x03, 0xca, 0x8a, 0xb5, 0x10, 0x95, 0x12, 0xca, 0x10, 0xf9, 0xa5, 0x02, 0x4a, 0xb0,
            0x09, 0x4a, 0xb0, 0x19, 0x4a, 0xb0, 0x1f, 0x4a, 0xb0, 0x2f, 0xa5, 0x10, 0x38, 0xe9, 0x20,
            0x85, 0x10, 0x90, 0x01, 0x60, 0xc6, 0x11, 0xa9, 0x01, 0xc5, 0x11, 0xf0, 0x28, 0x60, 0xe6,
            0x10, 0xa9, 0x1f, 0x24, 0x10, 0xf0, 0x1f, 0x60, 0xa5, 0x10, 0x18, 0x69, 0x20, 0x85, 0x10,
            0xb0, 0x01, 0x60, 0xe6, 0x11, 0xa9, 0x06, 0xc5, 0x11, 0xf0, 0x0c, 0x60, 0xc6, 0x10, 0xa5,
            0x10, 0x29, 0x1f, 0xc9, 0x1f, 0xf0, 0x01, 0x60, 0x4c, 0x35, 0x07, 0xa0, 0x00, 0xa5, 0xfe,
            0x91, 0x00, 0x60, 0xa6, 0x03, 0xa9, 0x00, 0x81, 0x10, 0xa2, 0x00, 0xa9, 0x01, 0x81, 0x10,
            0x60, 0xa6, 0xff, 0xea, 0xea, 0xca, 0xd0, 0xfb, 0x60
    });

    /* https://skilldrick.github.io/easy6502/simulator.html 
    auto game_code = std::make_unique<std::vector<uint8_t>>(std::initializer_list<uint8_t>{
        0x20, 0x54, 0x06, 0x20, 0x70, 0x06, 0x20, 0xc9, 0x06, 0x4c, 0x03, 0x06, 0x60, 0x48, 0x8a, 0x48,
            0xa9, 0x00, 0xa6, 0x10, 0x9d, 0x00, 0x05, 0xa6, 0x78, 0xa9, 0x01, 0x9d, 0x00, 0x05, 0x86, 0x10,
            0xa9, 0x00, 0xa6, 0x11, 0x9d, 0x00, 0x05, 0xa6, 0x79, 0xa9, 0x03, 0x9d, 0x00, 0x05, 0x86, 0x11,
            0xa9, 0x00, 0xa6, 0x12, 0x9d, 0x00, 0x05, 0xa6, 0x7a, 0xa9, 0x04, 0x9d, 0x00, 0x05, 0x86, 0x12,
            0xa9, 0x00, 0xa6, 0x13, 0x9d, 0x00, 0x05, 0xa6, 0x7b, 0xa9, 0x04, 0x9d, 0x00, 0x05, 0x86, 0x13,
            0x68, 0xaa, 0x68, 0x60, 0xa2, 0x00, 0xad, 0x0a, 0x07, 0x9d, 0x00, 0x02, 0x9d, 0x00, 0x04, 0xca,
            0xe0, 0x00, 0xd0, 0xf5, 0xa9, 0x10, 0x85, 0x80, 0xa2, 0x0f, 0x95, 0x81, 0xca, 0x10, 0xfb, 0x60,
            0xa9, 0x00, 0x85, 0x78, 0xa9, 0x20, 0x85, 0x79, 0xa9, 0xc0, 0x85, 0x7a, 0xa9, 0xe0, 0x85, 0x7b,
            0xa2, 0x0f, 0xb5, 0x81, 0x95, 0x82, 0xa8, 0x84, 0x02, 0xb9, 0xea, 0x06, 0x85, 0x00, 0xc8, 0xb9,
            0xea, 0x06, 0x85, 0x01, 0xad, 0x0a, 0x07, 0xa4, 0x78, 0x91, 0x00, 0xc8, 0x91, 0x00, 0xa4, 0x7b,
            0x91, 0x00, 0xc8, 0x91, 0x00, 0xa4, 0x79, 0xa9, 0x00, 0x91, 0x00, 0xc8, 0x91, 0x00, 0xa4, 0x7a,
            0x91, 0x00, 0xc8, 0x91, 0x00, 0xe6, 0x78, 0xe6, 0x79, 0xe6, 0x7a, 0xe6, 0x7b, 0xe6, 0x78, 0xe6,
            0x79, 0xe6, 0x7a, 0xe6, 0x7b, 0xca, 0x10, 0xba, 0x60, 0xa5, 0x80, 0xc5, 0x81, 0xf0, 0x09, 0xa5,
            0x80, 0x18, 0xe5, 0x81, 0x10, 0x0f, 0x30, 0x08, 0xa5, 0xfe, 0x29, 0x0f, 0x0a, 0x85, 0x80, 0x60,
            0xc6, 0x81, 0xc6, 0x81, 0x60, 0xe6, 0x81, 0xe6, 0x81, 0x60, 0x00, 0x02, 0x20, 0x02, 0x40, 0x02,
            0x60, 0x02, 0x80, 0x02, 0xa0, 0x02, 0xc0, 0x02, 0xe0, 0x02, 0x00, 0x03, 0x20, 0x03, 0x40, 0x03,
            0x60, 0x03, 0x80, 0x03, 0xa0, 0x03, 0xc0, 0x03, 0xe0, 0x03, 0x0d
    });*/

    cpu->load(*game_code);
    cpu->reset();

    std::vector<uint8_t> screen_state(32 * 32 * 3, 0);
    std::mt19937 rng(static_cast<unsigned>(time(nullptr)));

    while (*running)
    {
        MSG msg = {};
        while (PeekMessage(&msg, NULL, 0, 0, PM_REMOVE))
        {
            if (msg.message == WM_QUIT)
            {
                *running = false;
                break;
            }

            TranslateMessage(&msg);
            DispatchMessage(&msg);
        }

        cpu->mem_write(0xFE, rng() % 16 + 1);

        cpu->run(60);

        if (read_screen_state(*cpu, screen_state))
        {
            renderer.RenderFrame(screen_state);
        }
        else
        {
            renderer.RenderFrame(screen_state);
        }

        if (!cpu->is_cpu_running()) {
            *running = false;
        }
    }

    renderer.CleanD3D();
    return 0;
}

LRESULT CALLBACK WindowProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam)
{
    static CPU* cpuPtr = nullptr;

    switch (uMsg)
    {
    case WM_CREATE:
    {
        CREATESTRUCT* pCreate = (CREATESTRUCT*)lParam;
        cpuPtr = (CPU*)pCreate->lpCreateParams;
        SetWindowLongPtr(hwnd, GWLP_USERDATA, (LONG_PTR)cpuPtr);
    }
    break;
    case WM_DESTROY:
        PostQuitMessage(0);
        return 0;
    case WM_KEYDOWN:
        if (cpuPtr)
        {
            switch (wParam)
            {
            case VK_ESCAPE:
                PostQuitMessage(0);
                break;
            case 'Z':
                cpuPtr->mem_write(0xFF, 0x77);
                break;
            case 'S':
                cpuPtr->mem_write(0xFF, 0x73);
                break;
            case 'Q':
                cpuPtr->mem_write(0xFF, 0x61);
                break;
            case 'D':
                cpuPtr->mem_write(0xFF, 0x64);
                break;
            default:
                break;
            }
        }
        break;
    default:
        return DefWindowProc(hwnd, uMsg, wParam, lParam);
    }
    return 0;
}
